CMAKE_MINIMUM_REQUIRED(VERSION 3.2.3)

PROJECT(libQingStor)

SET(CMAKE_VERBOSE_MAKEFILE ON CACHE STRING "Verbose build." FORCE)

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMake" ${CMAKE_MODULE_PATH})

INCLUDE(Functions)
INCLUDE(Options)

IF (WIN32)
	SET(WLIB_TARGET "Win32")
	IF(CMAKE_CL_64)
		SET(WLIB_TARGET "x64")
	ENDIF()
	SET(OPENSSL_SSL_LIBRARY
		${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/lib/${WLIB_TARGET}/ssleay32.lib)
	SET(OPENSSL_CRYPTO_LIBRARY
		${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/lib/${WLIB_TARGET}/libeay32.lib)
	SET(OPENSSL_INCLUDE_DIR
		${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/include)

	SET(CURL_LIBRARIES
		${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/lib/${WLIB_TARGET}/libcurl.lib)
	SET(CURL_INCLUDE_DIRS
		${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/include)
	INCLUDE(ExternalProject)
	ADD_DEFINITIONS(-DWIN32)
ELSE ()
	INCLUDE(FindCURL)
	INCLUDE(FindOpenSSL)
	IF(NOT CURL_FOUND)
		message(FATAL_ERROR "Could not find curl")
	ENDIF()
	IF(NOT OPENSSL_FOUND)
		message(FATAL_ERROR "Could not find openssl")
	ENDIF()

	IF(OPTIMIZE_SPACE)
		IF(NOT CMAKE_BUILD_TYPE)
			SET(CMAKE_BUILD_TYPE "Release" CACHE STRING
				"Set the type of build to Release" FORCE)
		ENDIF()
		IF(NOT (CMAKE_BUILD_TYPE STREQUAL "Release" OR CMAKE_BUILD_TYPE STREQUAL "release"))
			MESSAGE(WARNING "NOT allowed to optimize space for non-release build type.")
		ENDIF()
	ENDIF()

ENDIF()

# add preprocesser macro
ADD_DEFINITIONS(-DCURL_STATICLIB)
ADD_DEFINITIONS(-DYAML_DECLARE_STATIC)

ADD_SUBDIRECTORY(src)




